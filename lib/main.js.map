{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ALL-THE-PACKAGE-NAMES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\n{ Dba }                   = require 'icql-dba'\n{ format }                = new Intl.NumberFormat()\n\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_dba = ->\n  db_filename = 'npm-names.sqlite'\n  path        = PATH.resolve __dirname, '..', db_filename\n  schema      = 'main'\n  dba         = new Dba()\n  dba.open { schema, path, }\n  dba.create_stdlib()\n  #.........................................................................................................\n  prefix      = 'std_'\n  regex_cache = {}\n  dba.create_function\n    name:           prefix + 're_is_match'\n    deterministic:  true\n    varargs:        false\n    call:           ( text, pattern ) ->\n      regex = ( regex_cache[ pattern ] ?= new RegExp pattern, 'g' )\n      # debug '^44443^', text, regex, ( text.match regex )\n      return if ( text.match regex )? then 1 else 0\n  # debug '^330^', [ ( dba.query \"select std_re_is_match( 'foobar', '(.)\\\\1\\\\1' )\" )..., ]\n  # debug '^330^', [ ( dba.query \"select std_re_is_match( 'fobar', '(.)\\\\1\\\\1' )\" )..., ]\n  # debug '^343^',  'foobar'.match new RegExp '(.)\\\\1\\\\1'\n  # debug '^343^',  'fobar'.match new RegExp '(.)\\\\1\\\\1'\n  # debug '^343^',  'foobar'.match new RegExp /(.)\\1\\1/\n  # debug '^343^',  'fobar'.match new RegExp /(.)\\1\\1/\n  #.........................................................................................................\n  dba.create_function\n    name:           'str_3_same_letters'\n    deterministic:  true\n    varargs:        false\n    call:           ( text ) ->\n      return if ( new Set text ).size is 1 then 1 else 0\n  debug '^330^', [ ( dba.query SQL\"select str_3_same_letters( 'aaa' );\" )..., ]\n  debug '^330^', [ ( dba.query SQL\"select str_3_same_letters( 'aab' );\" )..., ]\n  return { path, dba, schema, }\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_db_structure = ( dba ) ->\n  dba.execute SQL\"\"\"\n    create table if not exists names (\n      name    text unique not null primary key,\n      length  integer generated always as ( length( name ) ) virtual not null );\n    create index if not exists names_length_idx on names ( length );\n    create table if not exists short_names (\n      name    text unique not null primary key,\n      length  integer not null );\n    \"\"\"\n  letters     = 'abcdefghijklmnopqrstuvwxyz'\n  insert      = dba.prepare SQL\"insert into short_names ( name, length ) values ( $name, $length ) on conflict do nothing;\"\n  count       = 0\n  dba.with_transaction ->\n    for l1 in letters\n      for l2 in letters\n        count++\n        name2 = ( l1 + l2 )\n        insert.run { name: name2, length: 2, }\n        for l3 in letters\n          count++\n          name3 = name2 + l3\n          insert.run { name: name3, length: 3 }\n          for l4 in letters\n            count++\n            insert.run { name: ( name3 + l4 ), length: 4, }\n    return null\n  info \"generated #{format count} two-, three- and four-letter NPM names\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_populate_db = ->\n  { dba\n    path }    = create_dba()\n  names       = require '../names.json'\n  create_db_structure dba\n  info \"read #{format names.length} NPM names\"\n  insert      = dba.prepare SQL\"insert into names ( name ) values ( $name ) on conflict do nothing;\"\n  count       = 0\n  dba.with_transaction ->\n    for name in names\n      whisper format count if count % 1e5 is 0\n      count++\n      # return null if count > 3e4\n      # debug '^5580^', name\n      insert.run { name, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_show_select_names = ->\n  { dba\n    path }    = create_dba()\n  { Tbl }     = require 'icql-dba-tabulate'\n  { Dcat, }   = require 'icql-dba-catalog'\n  dtab        = new Tbl   { dba, }\n  # dcat        = new Dcat  { dba, }\n  help \"names\";     echo dtab._tabulate dba.query SQL\"select * from names limit 10;\"\n  help \"names\";     echo dtab._tabulate dba.query SQL\"\"\"\n    select\n        *\n      from short_names as n3\n      where not exists (\n        select 1\n          from names as n\n          where n.name = n3.name )\n      order by n3.name\n      limit 1000;\"\"\"\n  help \"four_letter_names\";     echo dtab._tabulate dba.query SQL\"\"\"\n    select\n        *\n      from short_names as nn\n      where true\n        and ( std_re_is_match( nn.name, '^d' ) ) -- or ( std_re_is_match( nn.name, 'daba' ) )\n        and not exists (\n          select 1\n            from names as n\n            where true\n              and n.name = nn.name )\n      order by nn.name\n      limit 100000;\"\"\"\n  # help \"names\";     echo dtab._tabulate dba.query SQL\"\"\"\n  #   select\n  #       *\n  #     from names as n\n  #     where true\n  #       and std_re_is_match( n.name, 'db' )\n  #     order by n.name;\"\"\"\n  # help \"names\";     echo dtab._tabulate dba.query SQL\"\"\"\n  #   select\n  #       *\n  #     from three_letter_names as n3\n  #     where str_3_same_letters( n3.name )\n  #     order by n3.name\n  #     limit 20;\"\"\"\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # demo_populate_db()\n  demo_show_select_names()\n\n\n"
  ]
}