{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ALL-THE-PACKAGE-NAMES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\n{ Dba }                   = require 'icql-dba'\n{ format }                = new Intl.NumberFormat()\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  db_filename = 'npm-names.sqlite'\n  path        = PATH.resolve __dirname, '..', db_filename\n  schema      = 'main'\n  dba         = new Dba()\n  dba.open { schema, path, }\n  dba.create_stdlib()\n  return null\n  names       = require '../names.json'\n  create_db_structure dba\n  info \"read #{format names.length} NPM names\"\n  insert      = dba.prepare SQL\"insert into names ( name ) values ( $name ) on conflict do nothing;\"\n  count       = 0\n  dba.with_transaction ->\n    for name in names\n      whisper format count if count % 1e5 is 0\n      count++\n      # return null if count > 3e4\n      # debug '^5580^', name\n      insert.run { name, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_db_structure = ( dba ) ->\n  dba.execute SQL\"\"\"\n    create table if not exists names (\n      name    text unique not null primary key,\n      length  integer generated always as ( length( name ) ) virtual not null );\n    create index if not exists names_length_idx on names ( length );\n    create table if not exists three_letter_names (\n      name    text unique not null primary key,\n      length  integer not null default 3 );\n    \"\"\"\n  letters     = 'abcdefghijklmnopqrstuvwxyz'\n  insert      = dba.prepare SQL\"insert into three_letter_names ( name ) values ( $name ) on conflict do nothing;\"\n  count       = 0\n  dba.with_transaction ->\n    for l1 in letters\n      for l2 in letters\n        for l3 in letters\n          count++\n          insert.run { name: ( l1 + l2 + l3 ), }\n    return null\n  info \"generated #{format count} three-letter NPM names\"\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  demo()\n"
  ]
}